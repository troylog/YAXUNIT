
Процедура ИсполняемыеСценарии() Экспорт
    ЮТТесты.ДобавитьТестовыйНабор("Документы: приход/расход и проверки").ВТранзакции()
        .ДобавитьТест("ПроверкаСозданияПриходаИРасхода")
        .ДобавитьТест("ПроверкаПроведенияПриходаИРасхода")
		.ДобавитьТест("ПроверкаОстаткаПоРегистрамТоварныеЗапасыИВзаиморасчеты");
КонецПроцедуры

//// ================== Тест: все приходы и расходы созданы ==================
Процедура ПроверкаСозданияПриходаИРасхода() Экспорт
    Товар = СозданияТовара("Товар_Test");
    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");

    // --- Создание документов прихода 20шт товара ---
	// --- Создание документа прихода 1 ---	
    ДокПриход1 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 3)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Записать();
	// --- Проверка записи прихода 1 ---
    ЮТест.ОжидаетЧто(ДокПриход1.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Запись))
        .НеВыбрасываетИсключение();
	ЮТест.ОжидаетЧто(ДокПриход1.Ссылка.Пустая()).Равно(Ложь);	
		
	// --- Создание документа прихода 2 ---	
	ДокПриход2 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 2)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 7)
        .Записать();
	// --- Проверка записи прихода 2---
    ЮТест.ОжидаетЧто(ДокПриход2.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Запись))
        .НеВыбрасываетИсключение();
	ЮТест.ОжидаетЧто(ДокПриход2.Ссылка.Пустая()).Равно(Ложь);	
		
		
	// --- Создание документа прихода 3 ---	
	ДокПриход3 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 1)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 8)
        .Записать();
	// --- Проверка записи прихода 3 ---
    ЮТест.ОжидаетЧто(ДокПриход3.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Запись))
        .НеВыбрасываетИсключение();
	ЮТест.ОжидаетЧто(ДокПриход3.Ссылка.Пустая()).Равно(Ложь);
	
		
    // --- Создание документов расхода 20шт товара---
    // --- Создание документа расхода 1 ---
    ДокРасход1 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 15)
        .Записать();
	// --- Проверка записи расхода 1 ---
    ЮТест.ОжидаетЧто(ДокРасход1.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Запись))
        .НеВыбрасываетИсключение();
	ЮТест.ОжидаетЧто(ДокРасход1.Ссылка.Пустая()).Равно(Ложь);	
		
    // --- Создание документа расхода 2 ---
	ДокРасход2 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Записать();
	// --- Проверка записи расхода 2 ---
    ЮТест.ОжидаетЧто(ДокРасход2.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Запись))
        .НеВыбрасываетИсключение();
	ЮТест.ОжидаетЧто(ДокРасход2.Ссылка.Пустая()).Равно(Ложь);	

КонецПроцедуры

//// ================== Тест: все приходы и расходы проведены ==================
Процедура ПроверкаПроведенияПриходаИРасхода() Экспорт
    Товар = СозданияТовара("Товар_Test");
    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");

    // --- Создание документов прихода 20шт товара ---
	// --- Создание документа прихода 1 ---	
    ДокПриход1 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 3)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Провести();
	// --- Проверка записи прихода 1 ---
    ЮТест.ОжидаетЧто(ДокПриход1.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
		
	// --- Создание документа прихода 2 ---	
	ДокПриход2 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 2)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 7)
        .Провести();
	// --- Проверка записи прихода 2---
    ЮТест.ОжидаетЧто(ДокПриход2.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
		
	// --- Создание документа прихода 3 ---	
	ДокПриход3 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 1)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 8)
        .Провести();
	// --- Проверка записи прихода 3 ---
    ЮТест.ОжидаетЧто(ДокПриход3.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
		
    // --- Создание документов расхода 20шт товара---
    // --- Создание документа расхода 1 ---
    ДокРасход1 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 15)
        .Провести();
	// --- Проверка записи расхода 1 ---
    ЮТест.ОжидаетЧто(ДокРасход1.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
    // --- Создание документа расхода 2 ---
	ДокРасход2 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Провести();
	// --- Проверка записи расхода 2 ---
    ЮТест.ОжидаетЧто(ДокРасход2.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();

КонецПроцедуры

//// ================== Тест: все движения по остаточным регистрам ТоварныеЗапасы и Взаиморасчеты выходят в ноль ==================
Процедура ПроверкаОстаткаПоРегистрамТоварныеЗапасыИВзаиморасчеты() Экспорт
    Товар = СозданияТовара("Товар_Test");
    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");
	Поставщик = ЮТест.Данные().СоздатьЭлемент("Справочники.Контрагенты");

    // --- Создание документов прихода 20шт товара ---
	// --- Создание документа прихода 1 ---	
    ДокПриход1 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
		.Установить("Поставщик", Поставщик)
		.Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 3)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Провести();		
		
	// --- Создание документа прихода 2 ---	
	ДокПриход2 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
		.Установить("Поставщик", Поставщик)
		.Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 2)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 7)
        .Провести();
		
	// --- Создание документа прихода 3 ---	
	ДокПриход3 = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
		.Установить("Поставщик", Поставщик)
		.Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 1)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 8)
        .Провести();		
		
		
    // --- Проверка движения по регистру ТоварныеЗапасы после всех приходов ---
    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.ТоварныеЗапасы")
        .СодержитЗаписи(
            ЮТест.Предикат().Реквизит("Товар").Равно(Товар)
        );
		
    // --- Проверка движения по регистру Взаиморасчеты после всех приходов ---
    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.Взаиморасчеты")
        .СодержитЗаписи(
            ЮТест.Предикат().Реквизит("Контрагент").Равно(Поставщик)
        );
		
		
    // --- Создание документов расхода 20шт товара---
    // --- Создание документа расхода 1 ---
    ДокРасход1 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
		.Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 15)
        .Провести();
		
    // --- Создание документа расхода 2 ---
	ДокРасход2 = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 5)
        .Провести();


    // --- Проверка остатка после расхода ---
    Остаток = ПолучитьОстаток("ТоварныеЗапасы", Товар, Склад);
    ЮТест.ОжидаетЧто(Остаток).Равно(0);

КонецПроцедуры



// ================== Негативный тест: расход больше прихода ==================
Процедура ПроверкаНедостаткаТовара() Экспорт
    Товар = СозданияТовара("Товар_Test");
    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");

    // --- Создание документа прихода (10 единиц) с датой раньше расхода ---
    ДокПриход = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса() - 1)
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", 10)
        .Провести();
		
	// --- Проверка проведения ---
    ЮТест.ОжидаетЧто(ДокПриход.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
    // --- Проверка движения по регистру ТоварныеЗапасы ---
    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.ТоварныеЗапасы")
        .СодержитЗаписи(
            ЮТест.Предикат().Реквизит("Товар").Равно(Товар)
        );

    // --- Создание документа расхода (100 единиц) ---
	КоличествоРасхода = 100;
	ДокРасход = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
        .ФикцияОбязательныхПолей()
        .Установить("Склад", Склад)
        .Установить("Дата", ТекущаяДатаСеанса())
        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
            .Установить("Товар", Товар)
            .Установить("Количество", КоличествоРасхода)
        .Записать(); // документ еще не проведен
		
	// --- Проверка проведения ---
    ЮТест.ОжидаетЧто(ДокРасход.ПолучитьОбъект())
        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
        .НеВыбрасываетИсключение();
		
    // --- Проверка остатка: он меньше требуемого количества ---
    Остаток = ПолучитьОстаток("ТоварныеЗапасы", Товар, Склад);
    ЮТест.ОжидаетЧто(Остаток).Меньше(КоличествоРасхода);

    // --- Попытка проведения: ожидаем исключение по нехватке товара ---
	ЮТест.ОжидаетЧто(ДокРасход.ПолучитьОбъект())  // Объект, метод которого проверяем
		.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) // Указываем проверяемый метод и параметры вызова
		.ВыбрасываетИсключение("Не удалось провести ""Продажа")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.ИмеетТип("Строка")
			.Содержит("Не хватает 90 единиц товара""Товар_Test""")
		;
		
		
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция СозданияТовара(Наименование)
    КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
        .ФикцияОбязательныхПолей()
        .Установить("Вид", Перечисления.ВидыТоваров.Товар)
        .Установить("Наименование", Наименование);
    Возврат КонструкторТовара.Записать();
КонецФункции

Функция ПолучитьОстаток(ИмяРегистра, Товар, Склад)
    Запрос = Новый Запрос(
        "ВЫБРАТЬ
         |   ВЫБОР КОГДА СУММА(Остатки.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(Остатки.КоличествоОстаток) КОНЕЦ КАК Количество
         |ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки() КАК Остатки
         |ГДЕ Остатки.Товар = &Товар
         |  И Остатки.Склад = &Склад"
    );
    Запрос.УстановитьПараметр("Товар", Товар);
    Запрос.УстановитьПараметр("Склад", Склад);
    Результат = Запрос.Выполнить().Выбрать();
    Если Результат.Следующий() Тогда
        Возврат Результат.Количество;
    КонецЕсли;
    Возврат 0;
КонецФункции

#КонецОбласти
