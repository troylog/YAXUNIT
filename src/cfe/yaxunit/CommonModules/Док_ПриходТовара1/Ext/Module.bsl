//Процедура ИсполняемыеСценарии() Экспорт
//    ЮТТесты.ДобавитьТестовыйНабор("Документы: приход/расход и проверки").ВТранзакции()
//        .ДобавитьТест("ПроверкаПриходаИРасхода")
//        .ДобавитьТест("ПроверкаНедостаткаТовара");
//КонецПроцедуры


//// ================== Позитивный тест: приход + расход, остаток = 0 ==================
//Процедура ПроверкаПриходаИРасхода() Экспорт
//    Товар = СозданияТовара("Товар_Test");
//    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");

//    // --- Создание документа прихода (10 единиц) с датой раньше расхода ---
//    ДокПриход = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
//        .ФикцияОбязательныхПолей()
//        .Установить("Склад", Склад)
//        .Установить("Дата", ТекущаяДатаСеанса() - 1)
//        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
//            .Установить("Товар", Товар)
//            .Установить("Количество", 10)
//        .Провести();  
//		
//	// --- Проверка проведения ---
//    ЮТест.ОжидаетЧто(ДокПриход.ПолучитьОбъект())
//        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
//        .НеВыбрасываетИсключение();
//		
//    // --- Проверка движения по регистру ТоварныеЗапасы ---
//    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.ТоварныеЗапасы")
//        .СодержитЗаписи(
//            ЮТест.Предикат().Реквизит("Товар").Равно(Товар)
//        );
//		
//    // --- Создание документа расхода (10 единиц) ---
//    ДокРасход = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
//        .ФикцияОбязательныхПолей()
//        .Установить("Склад", Склад)
//        .Установить("Дата", ТекущаяДатаСеанса())
//        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
//            .Установить("Товар", Товар)
//            .Установить("Количество", 10)
//        .Провести(); 
//		
//	// --- Проверка проведения ---
//    ЮТест.ОжидаетЧто(ДокРасход.ПолучитьОбъект())
//        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
//        .НеВыбрасываетИсключение();
//		

//    // --- Проверка остатка по регистру ---
//    Остаток = ПолучитьОстаток("ТоварныеЗапасы", Товар, Склад);
//    ЮТест.ОжидаетЧто(Остаток).Равно(0);

//КонецПроцедуры


//// ================== Негативный тест: расход больше прихода ==================
//Процедура ПроверкаНедостаткаТовара() Экспорт
//    Товар = СозданияТовара("Товар_Test");
//    Склад = ЮТест.Данные().СоздатьЭлемент("Справочники.Склады");

//    // --- Создание документа прихода (10 единиц) с датой раньше расхода ---
//    ДокПриход = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
//        .ФикцияОбязательныхПолей()
//        .Установить("Склад", Склад)
//        .Установить("Дата", ТекущаяДатаСеанса() - 1)
//        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
//            .Установить("Товар", Товар)
//            .Установить("Количество", 10)
//        .Провести();
//		
//	// --- Проверка проведения ---
//    ЮТест.ОжидаетЧто(ДокПриход.ПолучитьОбъект())
//        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
//        .НеВыбрасываетИсключение();
//		
//    // --- Проверка движения по регистру ТоварныеЗапасы ---
//    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.ТоварныеЗапасы")
//        .СодержитЗаписи(
//            ЮТест.Предикат().Реквизит("Товар").Равно(Товар)
//        );

//    // --- Создание документа расхода (100 единиц) ---
//	КоличествоРасхода = 100;
//	ДокРасход = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
//        .ФикцияОбязательныхПолей()
//        .Установить("Склад", Склад)
//        .Установить("Дата", ТекущаяДатаСеанса())
//        .ТабличнаяЧасть("Товары").ДобавитьСтроку()
//            .Установить("Товар", Товар)
//            .Установить("Количество", КоличествоРасхода)
//        .Записать(); // документ еще не проведен
//		
//	// --- Проверка проведения ---
//    ЮТест.ОжидаетЧто(ДокРасход.ПолучитьОбъект())
//        .Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение))
//        .НеВыбрасываетИсключение();
//		
//    // --- Проверка остатка: он меньше требуемого количества ---
//    Остаток = ПолучитьОстаток("ТоварныеЗапасы", Товар, Склад);
//    ЮТест.ОжидаетЧто(Остаток).Меньше(КоличествоРасхода);

//    // --- Попытка проведения: ожидаем исключение по нехватке товара ---
//	ЮТест.ОжидаетЧто(ДокРасход.ПолучитьОбъект())  // Объект, метод которого проверяем
//		.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) // Указываем проверяемый метод и параметры вызова
//		.ВыбрасываетИсключение("Не удалось провести ""Продажа")	
//		;
//		
//	Сообщения = ПолучитьСообщенияПользователю();
//	ЮТест.ОжидаетЧто(Сообщения)
//		.ИмеетТип("ФиксированныйМассив")
//		.ИмеетДлину(1)
//		.Свойство("[0].Текст")
//			.ИмеетТип("Строка")
//			.Содержит("Не хватает 90 единиц товара""Товар_Test""")
//		;
//		
//		
//КонецПроцедуры


//#Область СлужебныеПроцедурыИФункции

//Функция СозданияТовара(Наименование)
//    КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
//        .ФикцияОбязательныхПолей()
//        .Установить("Вид", Перечисления.ВидыТоваров.Товар)
//        .Установить("Наименование", Наименование);
//    Возврат КонструкторТовара.Записать();
//КонецФункции

//Функция ПолучитьОстаток(ИмяРегистра, Товар, Склад)
//    Запрос = Новый Запрос(
//        "ВЫБРАТЬ
//         |   ВЫБОР КОГДА СУММА(Остатки.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(Остатки.КоличествоОстаток) КОНЕЦ КАК Количество
//         |ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки() КАК Остатки
//         |ГДЕ Остатки.Товар = &Товар
//         |  И Остатки.Склад = &Склад"
//    );
//    Запрос.УстановитьПараметр("Товар", Товар);
//    Запрос.УстановитьПараметр("Склад", Склад);
//    Результат = Запрос.Выполнить().Выбрать();
//    Если Результат.Следующий() Тогда
//        Возврат Результат.Количество;
//    КонецЕсли;
//    Возврат 0;
//КонецФункции

//#КонецОбласти
